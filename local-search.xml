<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>达芬奇对比PR+AE在视频运动稳定方面的优劣</title>
    <link href="/2022/11/17/page_2/"/>
    <url>/2022/11/17/page_2/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文参考自网络，如有侵权告知即删。<br />此外，本文开启了评论留言，如有问题的可以在下方评论区留言。</p><p>本文作者: Ahem<br />原文地址：<a href="https://aheeem.xyz/2022/07/04/page_2/">https://aheeem.xyz/2022/07/04/page_2/</a></p>          </div><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>由于平时会带着自己的相机拍摄延时类型的摄影题材，生成的视频必不可少的会发生画面抖动的问题，大部分人都是简单的在剪辑软件里做一下稳定就导出视频了，那么为了精益求精做出完美不抖动的视频，就需要用到针对到帧的跟踪稳定，AE在点跟踪运动方面是独树一帜的老大哥，然而由于平时我自己用达芬奇比较多一点，所以迫切的想要找一个平替AE的解决方案。</p><h2 id="传统的稳定方案"><a class="markdownIt-Anchor" href="#传统的稳定方案"></a> 传统的稳定方案</h2><h3 id="pr单独稳定"><a class="markdownIt-Anchor" href="#pr单独稳定"></a> PR单独稳定</h3><p>说到视频稳定，大家肯定想到PR的变形稳定器，确实是一个很好用的工具，基本上大部分前期拍摄的比较“优质”的抖动视频都可以解决，只要在特效库里搜索变形稳定器，直接把它拖到时间轴里，pr就可以自动进行分析把他调整为一个稳定的视频，这里可以适当调整平滑度（平滑度越高，视频裁切比率越高）。但pr让人难以忍受的就是他的分析速度实在是太慢了，等接下来我介绍达芬奇的时候会再次提到。<br /><img src="/img/post2/pr1.png" alt="" /><br /> </p><h3 id="prae跟踪稳定"><a class="markdownIt-Anchor" href="#prae跟踪稳定"></a> PR+AE跟踪稳定</h3><p>上述的稳定仅限于对视频稳定度要求不那么高的使用，如果你接的是商业单，甲方要求视频要非常的有质感且稳定或者还有一种情况，你自己忍受不了有一丁点晃动，就是想要把她做到完美，那么该如何解决，此时AE强大的2D平面上的跟踪就起到了决定性的作用，当然在ae当中也有他自己的变形稳定器，我发现在ae中的变形稳定器的效果会比pr稍微好一点，所以如果你不想麻烦又想将视频做的稍微好一点的话，可以尝试在ae中做变形稳定。<br /> </p><ul><li>首先把fx变形稳定特效删掉，右击需要稳定的视频片段，选“使用After Effects合成替换”</li><li>进入AE选中视频，打开跟踪器，选择稳定运动，将跟踪点放到对比度较大的地方</li></ul><div class="note note-secondary">            <p>注意：小框：用来框选你想跟踪的东西；大框：软件的计算范围，就是在下一帧，软件会在这个大框里寻找上一帧你小框里的图案，找到了小框里相同的图案，就会整体位移过去，以此类推，就完成了跟踪</p>          </div><p><img src="/img/post2/ae1.png" alt="" /><br /> </p><ul><li>随便选择一帧向前向后分析，分析完之后按U显示所有关键帧，将跟踪不准的关键帧位置重新手动调整并将之后的关键帧删除重新分析</li><li>跟踪完之后点击应用，确定X、Y。现在的意思就是把我们刚才跟踪点作为视频的最中央，固定在视频中间，然后整个画面会跟着跟踪点的范围做不同的调动，这就导致了下图中黑框的出现<br /><img src="/img/post2/ae2.png" alt="" /><br /> </li><li>按s来对视频进行缩放使得视频从头到尾都在框框内<br /><img src="/img/post2/ae3.png" alt="" /><br /> </li><li>按下键盘上的预合成快捷键【Ctrl+Shift+C】，新建一个预合成，记得选中&quot;将所有属性移动到新合成&quot;</li></ul><div class="note note-danger">            <p>如果视频有点抖动的话，可以在确认完之后再加一个变形稳定器。</p>          </div><ul><li>在一切都确认无误后，从AE切换到PR，右击视频片段渲染和替换，然后将视频导出就算完成了。<br /> </li></ul><h2 id="达芬奇专业版跟踪稳定"><a class="markdownIt-Anchor" href="#达芬奇专业版跟踪稳定"></a> 达芬奇专业版跟踪稳定</h2><p>达芬奇软件内部可以直接通过效果库的跟踪运动来实现和AE几乎完全一样的点跟踪，而且比AE更快并且更容易操作，不需要pr、qe两个软件来回切换。至此，每当我拍延时的时候从lr导出序列到达芬奇就可以直接进行剪辑稳定调色的工作。<br />目前我的工作流：LRT关键帧去闪 → 导入LR进行调色批处理 → 回到LRT做圣杯模式关键帧过度导出序列 → 导入达芬奇进行剪辑调色稳定等操作 → 导出<br />传统工作流：LRT关键帧去闪 → 导入LR进行调色批处理 → 回到LRT做圣杯模式关键帧过度导出序列 → 导入pr剪辑 → 链接ae做稳定 → 回到pr做剪辑 → 最后导出<br />下面介绍如何使用达芬奇做点跟踪运动：</p><ul><li>导入需要做稳定的视频，进入调色界面搜索运动匹配效果串联节点，单击需要跟踪的位置会出现一个类似于AE的跟踪框</li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/post2/dv1.PNG" alt="" /></div><div class="group-image-wrap"><img src="/img/post2/dv22.PNG" alt="" /></div></div></div><ul><li>启用缩放和旋转再左右做跟踪<br /><img src="/img/post2/dv2.PNG" alt="" /><br /> </li><li>如果跟踪点跟歪了，找到那个点刷新跟踪<br /><img src="/img/post2/dv3.PNG" alt="" /><br /> </li><li>在节点区再导入一份视频作为外部蒙版再添加一个串行节点，如下图<br /><img src="/img/post2/dv4.PNG" alt="" /><br /> </li><li>回到剪辑界面右键新建复合片段<br /><img src="/img/post2/dv5.PNG" alt="" /><br /> </li><li>最后导出视频<br /><img src="/img/post2/dv6.PNG" alt="" /><br /> </li></ul><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>最后，达芬奇这几年的发展真的很好，要想做到真正的一体化剪辑软件还有很长一段路要走，我们大家一起期待他的成长！有喜欢摄影的朋友们也欢迎和我一起探讨！</p><h4 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h4><ul><li><a href="https://www.zhihu.com/question/283040186/answer/429000169">https://www.zhihu.com/question/283040186/answer/429000169</a></li><li><a href="https://www.youtube.com/watch?v=BjAJkgITHZ0">https://www.youtube.com/watch?v=BjAJkgITHZ0</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
      <tag>剪辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自行车车祸处理流程</title>
    <link href="/2022/07/05/page/"/>
    <url>/2022/07/05/page/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文参考自网络，如有侵权告知即删。</p><p>本文作者: Ahem<br />原文地址：<a href="https://aheeem.xyz/2022/07/04/page/">https://aheeem.xyz/2022/07/04/page/</a></p>          </div><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>稍微好点的公路车或者山地车的价格动辄大几千上万元，磕了碰了难免心疼，山地车，公路车等自行车如果在行驶过程当中遇到交通事故，从法律角度上，如何从事故中保护自己的权益。<br />无论如何都要以自身安全为前提，行车不规范，亲人两行泪，钱财乃身外之物，切勿因小失大了。</p><h4 id="事发当天"><a class="markdownIt-Anchor" href="#事发当天"></a> 事发当天</h4><p>1：<font color=red>检查自己有没有受伤</font> → 拍照(记录事故现场，对方车牌号、年检贴纸、行驶证+驾驶证)<span class="label label-info">ps：切记不要破坏现场</span><br />2：打122通知交警(事发地点+<font color=red>有人伤，有物损</font>+是否需要120？)<br />3：交警到场后：交代事发经过→通知交管→交管记录双方身份信息和简易事故经过→双方签字(如果有人伤交管会暂扣双方车辆)<span class="label label-info">ps：最好让交管写明自行车受损</span><br />4：去医院检查伤势：只要有不舒服的地方就去检查(就当去体检了)，让医生<font color=red>开诊断证明书</font>。(这个诊断证明书关系到后面交警的处理流程。伤势不重：简易处理；伤势较重：：交警会仔细勘察事故现场，测双方车速等。)</p><h4 id="第二天"><a class="markdownIt-Anchor" href="#第二天"></a> 第二天</h4><p>1：带上身份证复印件和诊断证明书复印件去交管支队处理事故。<br />2：交警开具交通事故认定书→双方签字→签提车单<br />3：拿着提车单去去自行车→拉到熟悉的车店定损(只要有刮擦、划痕就换新，按行货价报)→车店出具定损报告→通知保险要求外勘定损→定损员到车店对受损部件拍照取证。<div class="note note-danger">            <p>一般定损员对你的报价是存疑的，所以你至少要提供所有受损部件的官方售价截图/产品手册/淘宝售价截图，最好有发票，收据也行。<font color=red>定损原则：一定要实事求是，是要受损就报，没受损千万别报(被查出来就是骗保，划不来)，价格按官方售价来，保证自己的证据链完整。</font></p>          </div></p><h4 id="接下来好几天"><a class="markdownIt-Anchor" href="#接下来好几天"></a> 接下来好几天</h4><p>1：定损员会跟你谈折旧的问题。<font color=red>关于折旧：零部件折旧→不理他</font>，整车折旧：划得来你就和他谈<br />2：有发票最好，没有发票也不用着急。<br />   ①找熟悉的车店开零部件购买的发票<br />   ②开收据<br />   ③在定损的车店维修(更换受损部件)，让他给你开维修费用的发票<br />   ④实在没办法就算了光放售价截图/产品手册/淘宝售价截图，这些应该也都够用了。<br />3：定损员如果还一直跟你bb的话，直接打<span class="label label-info">12378</span>投诉对方保险公司。(只要是肇事车主全责，保险公司一般不会跟你多纠缠，一心想着让你取消投诉)</p><h4 id="第n20天"><a class="markdownIt-Anchor" href="#第n20天"></a> 第N(20)天</h4><p>1：出定损结果，交旧件。<br />2：让肇事车主把钱打给你或签第三方直赔协议(金额小于3万可以电话授权，大于3万需面签)<br />3：签过款单(没收到钱的话最好先别签，签了就意味着车主已经把钱给你了。)</p><h4 id="再过几天"><a class="markdownIt-Anchor" href="#再过几天"></a> 再过几天</h4><p>保险公司把钱打给肇事车主(签了第三方直赔协议就是打款给你)</p><h4 id="又过了好多好多天"><a class="markdownIt-Anchor" href="#又过了好多好多天"></a> 又过了好多好多天</h4><p>1：伤基本痊愈→联系保险进行人伤赔付(包括但不限于医疗费、交通费、营养费、误工费、精神抚慰金)，这个调解只有一次，所以务必等伤完全好了再去<br />2：调解完成→拿钱→签调解协议书(可面签)→OVER!</p>]]></content>
    
    
    <categories>
      
      <category>废话文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>骑行</tag>
      
      <tag>杂谈</tag>
      
      <tag>事件的处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + GitHub Pages 博客搭建</title>
    <link href="/2022/07/04/page-1/"/>
    <url>/2022/07/04/page-1/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文参考自网络，如有侵权告知即删。</p><p>本文作者: Ahem<br />原文地址：<a href="https://aheeem.xyz/2022/07/04/page-1/">https://aheeem.xyz/2022/07/04/page-1/</a></p>          </div><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><a href="https://aheeem.xyz/">这个博客</a>是我用Hexo + GitHub Pages搭建的，很早之前我就有想在网上发表自己的文章，记录自己的学习生活和大家一起讨论学习。为什么我要大费周章的搭建起一个个人博客，而不用目前主流的一些博客平台？例如知乎专栏、掘金、简书、CSDN、博客园、或者微信公众号。很多人会感觉自己的技术水平不够或怕被人diss而放弃写博客，但是不是大牛就不能写博客了吗？testtesttest</p><p>答案显然是否定的！</p><p>其实，哪怕是简单的分享自己的学习心得，记录自己从无到有的过程从中领略的经验，也是可以的。你写的博客不光可以提升自己的技术水平，展现你的技术能力，当然也可以用博客来展现自己的生活，这就类似于你给自己打了一份广告，博客就是你的’个人广告’，一个对外展示个人形象的渠道，这是除了微信以外让更多人能从文字图片的形式了解到你的方式，这是一条无所不能的全天候广告。虽然你不用打广告费，相反它却可以给你提供许许多多的学习机会和发展空间。</p><p>写博客能提高一个人的沟通能力(初高中时期作文写的就不好，现在在大学里更是没有机会写作，希望不要退化的太难看吧😝),长期禁锢在只会做不会说的牢笼里面总会有种给人不靠谱的感觉。博客作为一种比较正式、客观、真实的分享资源，他给我的感受就是它真的应该非常正式，不会有那么多套路，是纯粹的学术积累和开源精神的体现。</p><p>在正式开始之前，先来了解一些基础知识。</p><h2 id="静态网页和动态网页"><a class="markdownIt-Anchor" href="#静态网页和动态网页"></a> 静态网页和动态网页</h2><p>动态网页和静态网页的区别，首先要分别了解两个概念，就是什么是静态网页，什么是动态网页，并且学会区分哪些是静态哪些是动态。</p><h3 id="静态网页"><a class="markdownIt-Anchor" href="#静态网页"></a> 静态网页</h3><ul><li><p>静态网页是指存放在服务器文件系统中实实在在的HTML（即：超文本标记语言）文件，一般后缀为.html,.htm,或者.xml等。当用户在浏览器中输入URL，浏览器就会将对应的HTML文件下载、渲染并呈现在窗口中。</p></li><li><p>静态网页不能简单地理解成静止不动的网页，他主要指的是网页中没有程序代码，只有HTML。虽然静态网页的页面一旦做成，内容就不会再改变了。但是，静态网页也包括一些能动的部分，这些主要是一些GIF动画等。</p></li><li><p>静态网页的打开，用户可以直接双击，并且不管任何人任何时间打开的页面的内容都是不变的。</p></li></ul><h3 id="动态网页"><a class="markdownIt-Anchor" href="#动态网页"></a> 动态网页</h3><ul><li><p>动态网页是相对于静态网页而言的一种网页编程技术。动态网页的网页文件中除了HTML标记以外，还包括一些特定功能的程序代码，这些代码可以使得浏览器和服务器可以交互，所以服务器端根据客户的不同请求动态的生成网页内容。</p></li><li><p>动态网页，与网页上的各种动画、滚动字幕等视觉上的动态效果没有直接关系，动态网页也可以是纯文字内容的，也可以是包含各种动画的内容，这些只是网页具体内容的表现形式，无论网页是否具有动态效果，只要是采用了动态网站技术（如PHP、ASP、JSP等）生成的网页都可以称为动态网页。</p></li></ul><h3 id="静态网页和动态网页的区别"><a class="markdownIt-Anchor" href="#静态网页和动态网页的区别"></a> 静态网页和动态网页的区别</h3><h4 id="更新和维护"><a class="markdownIt-Anchor" href="#更新和维护"></a> 更新和维护</h4><ul><li>由于静态网页没有数据库的支持，当网站信息量太大时往往也会导致维护成本和制作成本的上升。而动态网页则具有更高的宽容性。</li></ul><h4 id="交互性"><a class="markdownIt-Anchor" href="#交互性"></a> 交互性</h4><ul><li>静态网页由于很多内容都是固定的，在功能方面有很大的限制，所以交互性较差</li><li>动态网页则可以实现更多的功能，如用户的登录、注册、查询等</li></ul><h4 id="响应速度"><a class="markdownIt-Anchor" href="#响应速度"></a> 响应速度</h4><ul><li>静态网页内容相对固定，容易被搜索引擎检索，且不需要连接数据库，因此响应速度较快</li><li>动态网页实际上并不是独立存在于服务器上的网页文件，只有当用户请求时服务器才返回一个完整的网页，其中涉及到数据的连接访问和查询等一系列过程，所以响应速度相对较慢</li></ul><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ul><li>由于博客只是为了展示信息，内容相对简单，所以我选择使用静态网页，简单易操作，不需要数据库管理，搭个人博客再适合不过了。</li></ul><h2 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> Node.js</h2><ul><li>我们知道在网页开发中，分为前端和后端（服务端），我们写前端一般就要用到JavaScript，可以在浏览器里运行JS的代码，Chrome浏览器的内核也就是V8引擎，它可以把JavaScript代码编译成machine code，这样一来电脑就可以很轻松的理解我们写的JS代码。</li><li>Node是V8引擎的容器，并且Node是由C++写的，所以NodeJS可以让JS代码脱离浏览器运行在服务器上，NodeJS还可以读写电脑上的文件、连接数据库、充当Web服务器</li></ul><div class="note note-secondary">            <p>国外有一篇非常好的介绍Node.js的文章，从原理入手讲解，下面是原文地址：<br /><a href="https://www.sitepoint.com/node-js-is-the-new-black/"><font color=blue>https://www.sitepoint.com/node-js-is-the-new-black/</font></a></p><p>更多关于Node.js的内容，请查看<a href="https://nodejs.org/"><font color=blue>Node.js的官网</font></a></p>          </div><h2 id="hexo-和-github-pages"><a class="markdownIt-Anchor" href="#hexo-和-github-pages"></a> Hexo 和 GitHub Pages</h2><ul><li><p>Hexo 是一款基于Node.js的快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></li><li><p>把生成的静态网页托管在GitHub（没错，你没听错，就是那个全球最大的同性恋交友网站🙄）上，GitHub Pages是GitHub提供的一个网页寄存服务，于2008年推出。可以用于存放静态网页，包括博客、项目文档甚至整本书。Jekyll、hexo、hugo框架可以用于将文档转换成静态网页，此类框架提供了将网页上传到GitHub Pages的功能。一般GitHub Pages的网站使用github.io的子域名，但是用户也可以使用第三方域名。</p></li></ul><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><p>// 下面正式开始搭建属于年轻人的第一个网站。</p><div class="note note-secondary">            <p>TIP<br />机型：MacBook Air(M1,2020)<br />系统类型：macOS Monterey ; version(12.4)</p><p>注：由于那台Windows系统的电脑上我已经搭建好了，为了不破坏环境就不演示Windows下的操作步骤了，但基本流程差不多。想了解更多Windows的详细操作步骤请移步至<a href="https://zhuanlan.zhihu.com/p/102592286"><font color=blue>从零开始搭建个人博客（超详细）</font></a></p>          </div><h2 id="注册github和git安装"><a class="markdownIt-Anchor" href="#注册github和git安装"></a> 注册GitHub和git安装</h2><p> </p><ul><li>默认大家都已经注册GitHub了，接下来要做的就是安装git</li></ul><h3 id="安装homebrew"><a class="markdownIt-Anchor" href="#安装homebrew"></a> 安装homebrew</h3><ul><li>进入Git官网，点击Download下载，选择你的系统类型，我的是macos<br /><img src="/img/post1/git1.png" alt="" /><br /> <br /> </li><li>macOS可以直接通过homebrew安装，非常方便，如果你还没有安装homebrew，进入homebrew官网下载<br /><img src="/img/post1/git2.png" alt="" /><br /> <br /> </li><li>进入homebrew官网复制下面的代码在终端运行<br /><img src="/img/post1/git3.png" alt="" /></li></ul><div class="note note-secondary">            <p>注意：如果你在科学上网，会出现443端口连接被拒的问题，在终端键入以下命令解决</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">https_proxy</span>=http://127.0.0.1:7890 <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:7890 <span class="hljs-attribute">all_proxy</span>=socks5://127.0.0.1:789<br></code></pre></td></tr></table></figure>          </div><p> </p><ul><li><p>打开终端复制代码安装homebrew，显示installation successful表示安装成功，我的提示warning<br /><img src="/img/post1/git4.png" alt="" /></p></li><li><p>可能是M1芯片的问题，在终端输入以下代码解决</p></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">- Add Homebrew <span class="hljs-keyword">to</span> your PATH <span class="hljs-keyword">in</span> ~/.zprofile:<br>    echo &#x27;eval <span class="hljs-constructor">$(<span class="hljs-operator">/</span><span class="hljs-params">opt</span><span class="hljs-operator">/</span><span class="hljs-params">homebrew</span><span class="hljs-operator">/</span><span class="hljs-params">bin</span><span class="hljs-operator">/</span><span class="hljs-params">brew</span> <span class="hljs-params">shellenv</span>)</span>&#x27; &gt;&gt; ~/.zprofile<br>    eval <span class="hljs-constructor">$(<span class="hljs-operator">/</span><span class="hljs-params">opt</span><span class="hljs-operator">/</span><span class="hljs-params">homebrew</span><span class="hljs-operator">/</span><span class="hljs-params">bin</span><span class="hljs-operator">/</span><span class="hljs-params">brew</span> <span class="hljs-params">shellenv</span>)</span><br></code></pre></td></tr></table></figure><p> </p><ul><li>现在只需要输入此命令以确保brew一切正常</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p><img src="/img/post1/git5.png" alt="" /><br /> </p><h3 id="安装git"><a class="markdownIt-Anchor" href="#安装git"></a> 安装git</h3><ul><li>mac系统安装git非常简单，只需要在终端键入</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure><p> </p><ul><li>输入<span class="label label-default">git</span>，回车得到如下图表示安装成功<br /><img src="/img/post1/git6.png" alt="" /></li></ul><h2 id="绑定github并提交文件"><a class="markdownIt-Anchor" href="#绑定github并提交文件"></a> 绑定GitHub并提交文件</h2><h3 id="通过ssh绑定github"><a class="markdownIt-Anchor" href="#通过ssh绑定github"></a> 通过ssh绑定GitHub</h3><ul><li><p>我们要用git上传文件到GitHub上首先要利用ssh远程到主机，而登陆方式有两种：一种是口令登录，还有一种是公钥登录。口令登录每次都要输入密码太麻烦了，而公钥登录就省去了输入密码的步骤，所以这里使用公钥登录的方式。</p></li><li><p>首先我们得在GitHub上添加ssh key配置，要想生成ssh key，就要先安装ssh，不过我们安装了git bash，其应该自带ssh。打开终端键入<span class="label label-default">ssh</span>命令，查看本机是否安装ssh<br /><img src="/img/post1/git7.jpg" alt="" /></p></li><li><p>如上图所示，即已安装ssh，然后键入<span class="label label-default">ssh-keygen -t rsa</span>命令，表示指定RSA算法生成密钥，敲四次回车，之后会生成密钥id_rsa和公钥id_rsa.pub。mac系统默认生成在：~/.ssh目录下。键入以下步骤直接在git bash上打开：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p> </p><ul><li>操作完如下图，复制id_rsa.pub文件的内容：</li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/post1/git8.jpg" alt="" /></div><div class="group-image-wrap"><img src="/img/post1/git8_2.jpg" alt="" /></div></div></div><p> </p><ul><li>在如下页面添加公钥(Title标题可以不填)<br /><img src="/img/post1/git8_3.jpg" alt="" /><br /> </li><li>验证是否成功，在终端输入以下命令绑定</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p> </p><ul><li>如下图表示绑定成功：<br /><img src="/img/post1/git8_4.jpg" alt="" /></li></ul><h3 id="提交文件"><a class="markdownIt-Anchor" href="#提交文件"></a> 提交文件</h3><p>提交文件有两种方法，我用的较为简单的一种</p><ul><li>直接将远程仓库clone到本地</li><li>将文件添加并commit到本地仓库</li><li>将本地仓库的内容push到远程仓库</li></ul><h4 id="提交文件详细步骤"><a class="markdownIt-Anchor" href="#提交文件详细步骤"></a> 提交文件详细步骤</h4><ul><li><p>首先，进入GitHub个人主页，进入新建的text项目，点击<span class="label label-default">code</span>，复制SSH的地址<br /><img src="/img/post1/git9.jpg" alt="" /><br /> </p></li><li><p>在电脑上新建一个文件夹test，然后新建位于文件夹位置的终端窗口，接下来输入 <span class="label label-default"> git clone ssh地址</span>，将远程仓库clone到本地，然后打开test文件夹查看是否和远程仓库一致，如下图：<br /><img src="/img/post1/git10.jpg" alt="" /><br /> </p></li><li><p>在test文件夹下新建一个txt测试文件，从此目录进入git bash，输入<span class="label label-default">git status</span>命令查看仓库状态：<br /><img src="/img/post1/git11.jpg" alt="" /><br /> </p></li><li><p>text 已经是一个 Git 仓库了，而我们刚刚创建的文件 text.txt 没有被追踪，也就是没有提交到本地仓库。现在我们使用<span class="label label-default">git add</span>命令将文件添加到了「临时缓冲区」，再用 <span class="label label-default">git commit -m 提交信息</span>将其提交到本地仓库，如下图：<br /><img src="/img/post1/git13.jpg" alt="" /><br /> </p></li><li><p>使用命令<span class="label label-default"> git log</span>可以查看仓库提交日志；<span class="label label-default"> git status</span>查看仓库目前状态，再键入<span class="label label-default">git push origin main</span>命令，将本地仓库提交到远程仓库：<br /><img src="/img/post1/git14.jpg" alt="" /></p></li><li><p>重新回到GitHub刷新仓库就可以看到我们刚刚提交的文件了</p></li></ul><h2 id="购买域名"><a class="markdownIt-Anchor" href="#购买域名"></a> 购买域名</h2><h2 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Node.js</h2><ul><li>mac系统安装nodejs非常简单（第一次在Windows上配置环境路径真的弄的我很恼火）<br /> </li><li>打开终端输入以下命令(等他慢慢跑完就可以了)：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">brew install <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>可能又是M1芯片的原因，它又双叒叕报错了</p><p>报错代码为 Error: node: Failed to download resource “icu4c”</p>          </div><p> </p><ul><li>解决方案如下（在Homebrew中重装两个模块，gettext和pcre2）：</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>brew reinstall gettext <br><span class="hljs-variable">$ </span>brew reinstall pcre2<br></code></pre></td></tr></table></figure><p> </p><ul><li>这样就完成啦~<br /><img src="/img/post1/node.jpg" alt="" /><br /> </li><li>用 node -v 和 npm -v 命令检查版本，如下图<br /><img src="/img/post1/node2.jpg" alt="" /><br /> </li></ul><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><ul><li>输入<span class="label label-default">npm install webpack -g</span>，出现下图即表示成功<br /><img src="/img/post1/node3.jpg" alt="" /></li></ul><h2 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装Hexo</h2><h3 id="创建一个pages"><a class="markdownIt-Anchor" href="#创建一个pages"></a> 创建一个pages</h3><ul><li>Hexo是我们的个人博客网站的框架，在安装之前，我们要在GitHub上创建一个仓库，并且仓库的名称格式要是：“<a href="http://xn--eqr924avxo.github.io">用户名.github.io</a>”,如下图:</li></ul><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/post1/pages.jpg" alt="" /></div><div class="group-image-wrap"><img src="/img/post1/pages1.jpg" alt="" /></div></div></div><h3 id="安装hexo-2"><a class="markdownIt-Anchor" href="#安装hexo-2"></a> 安装hexo</h3><ul><li>在桌面上新建一个blog文件夹，打开终端cd到blog目录下输入npm命令安装hexo</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p> </p><ul><li><p>安装完成后，输入<span class="label label-default"> hexo init</span>命令初始化博客</p></li><li><p>然后使用以下命令部署博客</p></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p> </p><ul><li>然后打开http://localhost:4000/就可以看到部署好的网页了<br /><img src="/img/post1/pages3.jpg" alt="" /><br /> </li></ul><h3 id="将hexo部署到github"><a class="markdownIt-Anchor" href="#将hexo部署到github"></a> 将hexo部署到GitHub</h3><ul><li>回到blog文件夹，打开_config.yml(博客配置)文件，下滑到底部修改deploy部分，添加如下内容：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">deploy:<br>  type: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo: git@github<span class="hljs-selector-class">.com</span>:你的用户名/你的用户名<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span><br>  branch: main<br></code></pre></td></tr></table></figure><p> </p><ul><li>打开终端，cd到blog文件夹中，安装git部署插件，执行如下命令：</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p> </p><ul><li>这样即为安装成功<br /><img src="/img/post1/pages3_1.jpg" alt="" /><br /> </li><li>然后执行经典三连：</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean  #清除缓存文件 db<span class="hljs-variable">.json</span> 和已生成的静态文件 public<br>hexo g      #生成网站静态文件到默认设置的 public 文件夹(hexo <span class="hljs-keyword">generate</span> 的缩写)<br>hexo d      #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)<br></code></pre></td></tr></table></figure><p> </p><ul><li>等上一段时间(可能很久)，就可以输入https://xxx.github.io查看博客了<br /><img src="/img/post1/pages4.jpg" alt="" /></li></ul><h2 id="域名解析"><a class="markdownIt-Anchor" href="#域名解析"></a> 域名解析</h2><h2 id="设置fluid主题"><a class="markdownIt-Anchor" href="#设置fluid主题"></a> 设置Fluid主题</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><ul><li>现在博客也搭建好了，接下来就是美化博客，当下用的最多的是next主题，由于不太戳我XP，我选择了Material Design 风格的主题“Fluid”</li></ul><h3 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h3><h4 id="1-获取主题最新版本"><a class="markdownIt-Anchor" href="#1-获取主题最新版本"></a> 1. 获取主题最新版本</h4><p><strong>方式一：</strong></p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><p><strong>方式二：</strong></p><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本</a> 解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><h4 id="2-指定主题"><a class="markdownIt-Anchor" href="#2-指定主题"></a> 2. 指定主题</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="3-创建关于页"><a class="markdownIt-Anchor" href="#3-创建关于页"></a> 3. 创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h2 id="更新主题"><a class="markdownIt-Anchor" href="#更新主题"></a> 更新主题</h2><p>更新主题的方式<a href="https://hexo.fluid-dev.com/docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98">参照这里</a>。</p><ul><li>大功告成！<br /><img src="/img/post1/pages5.jpg" alt="" /></li></ul><h4 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h4><ul><li><a href="https://www.html.cn/qa/frontend/19655.html">https://www.html.cn/qa/frontend/19655.html</a></li><li><a href="https://hexo.io/docs/">https://hexo.io/docs/</a></li><li><a href="https://zh.wikipedia.org/wiki/GitHub_Pages">https://zh.wikipedia.org/wiki/GitHub_Pages</a></li><li><a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a></li><li><a href="https://blog.csdn.net/qq_37390306/article/details/119831091">https://blog.csdn.net/qq_37390306/article/details/119831091</a></li><li><a href="https://segmentfault.com/a/1190000038373795">https://segmentfault.com/a/1190000038373795</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid#readme">https://github.com/fluid-dev/hexo-theme-fluid#readme</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>just for test</title>
    <link href="/2022/06/14/just-for-test/"/>
    <url>/2022/06/14/just-for-test/</url>
    
    <content type="html"><![CDATA[<h1 id="这是标题"><a class="markdownIt-Anchor" href="#这是标题"></a> 这是标题</h1><h2 id="下面是公式"><a class="markdownIt-Anchor" href="#下面是公式"></a> 下面是公式</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
